import os
import logging
import re
import asyncio
import uuid
import subprocess
import time
from typing import Union
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    FSInputFile,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineQuery,
    InlineQueryResultVideo,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest
import yt_dlp
from dotenv import load_dotenv

load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
API_TOKEN = os.getenv("BOT_TOKEN")
FFMPEG_PATH = "bin/ffmpeg"

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ FFmpeg ---
def install_ffmpeg():
    if not os.path.exists(FFMPEG_PATH):
        logging.info("FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
        try:
            os.makedirs("bin", exist_ok=True)
            ffmpeg_url = "https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz"
            archive_path = "ffmpeg.tar.xz"
            subprocess.run(["curl", "-L", "-o", archive_path, ffmpeg_url], check=True)
            logging.info("–ê—Ä—Ö–∏–≤ FFmpeg —Å–∫–∞—á–∞–Ω.")
            temp_dir = "ffmpeg_temp"
            os.makedirs(temp_dir, exist_ok=True)
            subprocess.run(["tar", "-xJf", archive_path, "-C", temp_dir, "--strip-components=1"], check=True)
            os.rename(os.path.join(temp_dir, "ffmpeg"), FFMPEG_PATH)
            os.chmod(FFMPEG_PATH, 0o755)
            os.remove(archive_path)
            os.rmdir(temp_dir)
            logging.info("FFmpeg —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å FFmpeg: {e}")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM –∏ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
class DownloadState(StatesGroup):
    url = State()

def create_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì• TikTok")],
            [KeyboardButton(text="üì∏ Instagram")],
            [KeyboardButton(text="üé• YouTube")],
            [KeyboardButton(text="üê¶ X (Twitter)")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    return keyboard

# --- –ï–¥–∏–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ---
def download_video_from_url(url: str, platform: str, progress_hook: Union[callable, None] = None) -> Union[str, None]:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å–æ –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç cookies –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫.
    """
    try:
        unique_id = uuid.uuid4()
        output_template = f"downloads/{platform}/{unique_id}.%(ext)s"
        os.makedirs(f"downloads/{platform}", exist_ok=True)

        ydl_opts = {
            "quiet": True,
            "format": "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best",
            "outtmpl": output_template,
            "noplaylist": True,
            "merge_output_format": "mp4",
            "ffmpeg_location": FFMPEG_PATH,
            # –í–ê–ñ–ù–û: –≠—Ç–∞ –æ–ø—Ü–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å TikTok
            "cookiefile": "cookies.txt",
        }

        if progress_hook:
            ydl_opts["progress_hooks"] = [progress_hook]

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            logging.info(f"–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å {platform}: {url}")
            ydl.extract_info(url, download=True)
            base_path = f"downloads/{platform}/{unique_id}"
            for ext in ['mp4', 'mkv', 'webm']:
                video_file = f"{base_path}.{ext}"
                if os.path.exists(video_file):
                    logging.info(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {video_file}")
                    return video_file
            logging.error(f"–û—à–∏–±–∫–∞: —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {url}")
            return None
    except Exception as e:
        logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Å {platform} ({url}): {e}")
        return None

def get_platform_from_url(url: str) -> Union[str, None]:
    if "tiktok.com" in url: return "tiktok"
    if "instagram.com" in url: return "instagram"
    if "youtube.com" in url or "youtu.be" in url: return "youtube"
    if "twitter.com" in url or "x.com" in url: return "twitter"
    return None

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    await state.clear()
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –Ω–∏–∂–µ.",
        reply_markup=create_main_keyboard(),
    )

@dp.message(lambda message: message.text in ["üì• TikTok", "üì∏ Instagram", "üé• YouTube", "üê¶ X (Twitter)"])
async def handle_platform_choice(message: types.Message, state: FSMContext):
    await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(DownloadState.url)

@dp.message(DownloadState.url)
@dp.message(lambda message: message.text and message.text.startswith("http"))
async def process_video_link(message: types.Message, state: FSMContext):
    url = message.text.strip()
    await state.clear()
    platform = get_platform_from_url(url)
    if not platform:
        await message.reply("–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ.")
        return

    loading_message = await message.reply("üì• –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ...")

    last_update_time = 0
    def progress_hook(d):
        nonlocal last_update_time
        if d["status"] == "downloading":
            current_time = time.time()
            if current_time - last_update_time < 1.5: return
            total = d.get("total_bytes") or d.get("total_bytes_estimate", 0)
            if total > 0:
                percent = d.get("downloaded_bytes", 0) / total * 100
                speed = d.get("speed", 0) or 0
                progress_bar = "".join(["‚ñà" if i < percent / 10 else "‚ñë" for i in range(10)])
                status_text = f"üì• **–°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...**\n`{progress_bar}` {percent:.1f}%\n–°–∫–æ—Ä–æ—Å—Ç—å: {speed / 1024 / 1024:.2f} –ú–ë/—Å"
                try:
                    asyncio.run_coroutine_threadsafe(loading_message.edit_text(status_text, parse_mode="Markdown"), asyncio.get_running_loop())
                    last_update_time = current_time
                except TelegramBadRequest: pass

    video_file = await asyncio.to_thread(download_video_from_url, url, platform, progress_hook)
    
    await loading_message.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ...")
    if video_file:
        try:
            video_input = FSInputFile(video_file)
            await message.reply_video(video_input)
            await loading_message.delete()
            logging.info(f"–í–∏–¥–µ–æ —Å {platform} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
            await loading_message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ.")
        finally:
            try:
                os.remove(video_file)
                logging.info(f"–§–∞–π–ª {video_file} —É–¥–∞–ª–µ–Ω.")
            except OSError as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {video_file}: {e}")
    else:
        await loading_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞ ---
@dp.inline_query()
async def inline_handler(query: InlineQuery):
    url = query.query.strip()
    results = []
    if not url.startswith("http"): return
    platform = get_platform_from_url(url)
    if platform:
        logging.info(f"–ò–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å {platform}: {url}")
        video_file_path = None
        try:
            video_file_path = await asyncio.to_thread(download_video_from_url, url, platform)
            if video_file_path:
                video_file = FSInputFile(video_file_path)
                msg = await bot.send_video(chat_id=query.from_user.id, video=video_file, caption="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞...")
                video_file_id = msg.video.file_id
                await msg.delete()
                results.append(InlineQueryResultVideo(id=str(uuid.uuid4()), video_file_id=video_file_id, title=f"–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å {platform.capitalize()}", caption=f"–í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é –≤–∞—à–µ–≥–æ –±–æ—Ç–∞", mime_type="video/mp4"))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        finally:
            if video_file_path and os.path.exists(video_file_path):
                os.remove(video_file_path)
                logging.info(f"–ò–Ω–ª–∞–π–Ω-—Ñ–∞–π–ª {video_file_path} —É–¥–∞–ª–µ–Ω.")
    await query.answer(results, cache_time=1)

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---
async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    install_ffmpeg()
    if not os.path.exists("downloads"):
        os.makedirs("downloads")
    asyncio.run(main())