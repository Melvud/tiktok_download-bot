import os
import logging
import re
import asyncio
import uuid
import subprocess
import time  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å time
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    FSInputFile,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineQuery,
    InlineQueryResultVideo,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramBadRequest  # –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API
import yt_dlp
from dotenv import load_dotenv

load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
API_TOKEN = os.getenv("BOT_TOKEN")
FFMPEG_PATH = "bin/ffmpeg"

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ FFmpeg (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def install_ffmpeg():
    if not os.path.exists(FFMPEG_PATH):
        logging.info("FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
        try:
            os.makedirs("bin", exist_ok=True)
            ffmpeg_url = "https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz"
            archive_path = "ffmpeg.tar.xz"
            subprocess.run(
                ["curl", "-L", "-o", archive_path, ffmpeg_url], check=True
            )
            logging.info("–ê—Ä—Ö–∏–≤ FFmpeg —Å–∫–∞—á–∞–Ω.")
            temp_dir = "ffmpeg_temp"
            os.makedirs(temp_dir, exist_ok=True)
            subprocess.run(
                ["tar", "-xJf", archive_path, "-C", temp_dir, "--strip-components=1"],
                check=True,
            )
            os.rename(os.path.join(temp_dir, "ffmpeg"), FFMPEG_PATH)
            os.chmod(FFMPEG_PATH, 0o755)
            os.remove(archive_path)
            os.rmdir(temp_dir)
            logging.info("FFmpeg —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å FFmpeg: {e}")

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# ... (–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –∏ –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
class DownloadState(StatesGroup):
    url = State()

def create_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì• TikTok")],
            [KeyboardButton(text="üì∏ Instagram")],
            [KeyboardButton(text="üé• YouTube")],
            [KeyboardButton(text="üê¶ X (Twitter)")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    return keyboard
# --- –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ---
def download_video_from_url(
    url: str, platform: str, progress_hook: callable | None = None
) -> str | None:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å-—Ö—É–∫–∞.
    """
    try:
        unique_id = uuid.uuid4()
        output_template = f"downloads/{platform}/{unique_id}.%(ext)s"
        os.makedirs(f"downloads/{platform}", exist_ok=True)

        ydl_opts = {
            "quiet": True,
            "format": "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best",
            "outtmpl": output_template,
            "noplaylist": True,
            "merge_output_format": "mp4",
            "ffmpeg_location": FFMPEG_PATH,
            # 'proxy': 'YOUR_PROXY_URL' # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø—Ä–æ–∫—Å–∏
        }

        # <<< –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º —Ö—É–∫ –≤ –æ–ø—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω
        if progress_hook:
            ydl_opts["progress_hooks"] = [progress_hook]

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            logging.info(f"–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å {platform}: {url}")
            info_dict = ydl.extract_info(url, download=True)

            base_path = f"downloads/{platform}/{unique_id}"
            for ext in ["mp4", "mkv", "webm"]:
                video_file = f"{base_path}.{ext}"
                if os.path.exists(video_file):
                    logging.info(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {video_file}")
                    return video_file

            logging.error(f"–û—à–∏–±–∫–∞: —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {url}")
            return None

    except yt_dlp.utils.DownloadError as e:
        logging.error(f"–û—à–∏–±–∫–∞ yt-dlp –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Å {platform} ({url}): {e}")
        return None
    except Exception as e:
        logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Å {platform} ({url}): {e}")
        return None

def get_platform_from_url(url: str) -> str | None:
    # ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if "tiktok.com" in url: return "tiktok"
    if "instagram.com" in url: return "instagram"
    if "youtube.com" in url or "youtu.be" in url: return "youtube"
    if "twitter.com" in url or "x.com" in url: return "twitter"
    return None

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π (cmd_start –∏ handle_platform_choice –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    await state.clear()
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –Ω–∏–∂–µ.",
        reply_markup=create_main_keyboard(),
    )

@dp.message(lambda message: message.text in ["üì• TikTok", "üì∏ Instagram", "üé• YouTube", "üê¶ X (Twitter)"])
async def handle_platform_choice(message: types.Message, state: FSMContext):
    await message.reply(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.", reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(DownloadState.url)


# --- <<< –ó–î–ï–°–¨ –û–°–ù–û–í–ù–´–ï –ò–ó–ú–ï–ù–ï–ù–ò–Ø >>> ---
@dp.message(DownloadState.url)
@dp.message(lambda message: message.text and message.text.startswith("http"))
async def process_video_link(message: types.Message, state: FSMContext):
    url = message.text.strip()
    await state.clear()

    platform = get_platform_from_url(url)
    if not platform:
        await message.reply("–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    loading_message = await message.reply("üì• –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ...")

    # --- –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-—Ö—É–∫–∞ ---
    last_update_time = 0
    
    def progress_hook(d):
        nonlocal last_update_time
        if d["status"] == "downloading":
            current_time = time.time()
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ä–∞–∑ –≤ 1.5 —Å–µ–∫—É–Ω–¥—ã)
            if current_time - last_update_time < 1.5:
                return

            downloaded = d.get("downloaded_bytes", 0)
            total = d.get("total_bytes") or d.get("total_bytes_estimate", 0)

            if total > 0:
                percent = downloaded / total * 100
                speed = d.get("speed", 0) or 0
                speed_mbps = speed / 1024 / 1024
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                progress_bar = "".join(
                    ["‚ñà" if i < percent / 10 else "‚ñë" for i in range(10)]
                )
                
                status_text = (
                    f"üì• **–°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...**\n"
                    f"`{progress_bar}` {percent:.1f}%\n"
                    f"–°–∫–æ—Ä–æ—Å—Ç—å: {speed_mbps:.2f} –ú–ë/—Å"
                )

                try:
                    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                    # –∏–∑ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ (—Ö—É–∫–∞)
                    asyncio.run_coroutine_threadsafe(
                        loading_message.edit_text(status_text, parse_mode="Markdown"),
                        asyncio.get_running_loop()
                    )
                    last_update_time = current_time
                except TelegramBadRequest:
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
                    pass
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, –ø–µ—Ä–µ–¥–∞–≤–∞—è –Ω–∞—à —Ö—É–∫
    video_file = await asyncio.to_thread(
        download_video_from_url, url, platform, progress_hook
    )

    # –ú–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    await loading_message.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ...")

    if video_file:
        try:
            video_input = FSInputFile(video_file)
            await message.reply_video(video_input)
            await loading_message.delete() # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logging.info(f"–í–∏–¥–µ–æ —Å {platform} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
            await loading_message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ.")
        finally:
            try:
                os.remove(video_file)
                logging.info(f"–§–∞–π–ª {video_file} —É–¥–∞–ª–µ–Ω.")
            except OSError as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {video_file}: {e}")
    else:
        await loading_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ.")

# --- –ò–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

@dp.inline_query()
async def inline_handler(query: InlineQuery):
    url = query.query.strip()
    results = []

    if not url.startswith("http"):
        return

    platform = get_platform_from_url(url)
    if platform:
        logging.info(f"–ò–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å {platform}: {url}")
        
        video_file_path = None
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∏ –¥–ª—è –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞
            if platform == "tiktok":
                video_file_path = await asyncio.to_thread(download_video_from_tiktok_legacy, url)
            else:
                # –î–ª—è –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –Ω–µ –Ω—É–∂–µ–Ω
                video_file_path = await asyncio.to_thread(download_video_from_url, url, platform)

            if video_file_path:
                video_file = FSInputFile(video_file_path)
                
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –≤ —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å file_id
                msg = await bot.send_video(
                    chat_id=query.from_user.id, 
                    video=video_file, 
                    caption="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞..."
                )
                video_file_id = msg.video.file_id
                await msg.delete()

                results.append(
                    InlineQueryResultVideo(
                        id=str(uuid.uuid4()),
                        video_file_id=video_file_id,
                        title=f"–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å {platform.capitalize()}",
                        caption=f"–í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é –≤–∞—à–µ–≥–æ –±–æ—Ç–∞", # –ú–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å @username
                        mime_type="video/mp4",
                    )
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        finally:
            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
            if video_file_path and os.path.exists(video_file_path):
                os.remove(video_file_path)
                logging.info(f"–ò–Ω–ª–∞–π–Ω-—Ñ–∞–π–ª {video_file_path} —É–¥–∞–ª–µ–Ω.")

    await query.answer(results, cache_time=1)

# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ ---

async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    install_ffmpeg()
    if not os.path.exists("downloads"):
        os.makedirs("downloads")
    asyncio.run(main())