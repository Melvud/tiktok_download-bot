import os
import logging
import asyncio
import uuid
import subprocess
import time
from typing import Optional, Callable

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    FSInputFile,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineQuery,
    InlineQueryResultCachedVideo,
    ReplyKeyboardRemove,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

import yt_dlp
from dotenv import load_dotenv

load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
API_TOKEN = os.getenv("BOT_TOKEN")
FFMPEG_PATH = "bin/ffmpeg"
COOKIES_FILE = os.getenv("COOKIES_FILE", "ig_cookies.txt")

# --- –ü–æ–º–æ—â–Ω–∏–∫–∏ ---
def ffmpeg_bin() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ ffmpeg: –ª–æ–∫–∞–ª—å–Ω—ã–π –±–∏–Ω–∞—Ä—å –∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π."""
    return FFMPEG_PATH if os.path.exists(FFMPEG_PATH) else "ffmpeg"

def ffprobe_bin() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ ffprobe: –ª–æ–∫–∞–ª—å–Ω—ã–π –±–∏–Ω–∞—Ä—å –∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–π."""
    local = "bin/ffprobe"
    return local if os.path.exists(local) else "ffprobe"

def install_ffmpeg() -> None:
    """–ü–æ–ø—ã—Ç–∫–∞ —Å–∫–∞—á–∞—Ç—å —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π ffmpeg (Linux x86_64). –ù–∞ macOS/Windows –ø–æ—Å—Ç–∞–≤—å—Ç–µ —Å–∏—Å—Ç–µ–º–Ω–æ."""
    if os.path.exists(FFMPEG_PATH):
        return
    try:
        os.makedirs("bin", exist_ok=True)
        ffmpeg_url = "https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz"
        archive_path = "ffmpeg.tar.xz"
        subprocess.run(["curl", "-L", "-o", archive_path, ffmpeg_url], check=True)
        logging.info("–ê—Ä—Ö–∏–≤ FFmpeg —Å–∫–∞—á–∞–Ω.")
        temp_dir = "ffmpeg_temp"
        os.makedirs(temp_dir, exist_ok=True)
        subprocess.run(["tar", "-xJf", archive_path, "-C", temp_dir, "--strip-components=1"], check=True)
        # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –∏ ffmpeg, –∏ ffprobe
        os.rename(os.path.join(temp_dir, "ffmpeg"), FFMPEG_PATH)
        if os.path.exists(os.path.join(temp_dir, "ffprobe")):
            os.rename(os.path.join(temp_dir, "ffprobe"), "bin/ffprobe")
            os.chmod("bin/ffprobe", 0o755)
        os.chmod(FFMPEG_PATH, 0o755)
        os.remove(archive_path)
        os.rmdir(temp_dir)
        logging.info("FFmpeg/FFprobe —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å FFmpeg: {e}")

def check_codecs(file_path: str) -> tuple[str, str]:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–≤–∏–¥–µ–æ–∫–æ–¥–µ–∫, –∞—É–¥–∏–æ–∫–æ–¥–µ–∫) —á–µ—Ä–µ–∑ ffprobe, –ª–∏–±–æ ('','') –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
    try:
        vcodec = subprocess.check_output(
            [ffprobe_bin(), "-v", "error", "-select_streams", "v:0",
             "-show_entries", "stream=codec_name", "-of", "csv=p=0", file_path],
            timeout=30
        ).decode().strip()
        acodec = subprocess.check_output(
            [ffprobe_bin(), "-v", "error", "-select_streams", "a:0",
             "-show_entries", "stream=codec_name", "-of", "csv=p=0", file_path],
            timeout=30
        ).decode().strip()
        return vcodec, acodec
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–µ–∫–æ–≤: {e}")
        return "", ""

def repack_to_mp4(input_path: str) -> Optional[str]:
    """–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–ø–∞–∫ –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ CPU)."""
    try:
        base, _ = os.path.splitext(input_path)
        out = f"{base}_repack.mp4"
        subprocess.run(
            [ffmpeg_bin(), "-nostdin", "-loglevel", "error",
             "-y", "-i", input_path, "-c", "copy", "-movflags", "+faststart", out],
            check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=180
        )
        return out if os.path.exists(out) else None
    except subprocess.TimeoutExpired:
        logging.error("–†–µ–ø–∞–∫ –ø—Ä–µ–≤—ã—Å–∏–ª —Ç–∞–π–º–∞—É—Ç –∏ –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω.")
        return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–ø–∞–∫–∞: {e}")
        return None

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
if not API_TOKEN:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏ (.env).")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# --- FSM –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
class DownloadState(StatesGroup):
    url = State()

def create_main_keyboard() -> ReplyKeyboardMarkup:
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì• TikTok")],
            [KeyboardButton(text="üì∏ Instagram")],
            [KeyboardButton(text="üé• YouTube")],
            [KeyboardButton(text="üê¶ X (Twitter)")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    return keyboard

# --- –£—Ç–∏–ª–∏—Ç—ã ---
def get_platform_from_url(url: str) -> Optional[str]:
    u = url.lower()
    if "tiktok.com" in u:
        return "tiktok"
    if "instagram.com" in u:
        return "instagram"
    if "youtube.com" in u or "youtu.be" in u:
        return "youtube"
    if "twitter.com" in u or "x.com" in u:
        return "twitter"
    return None

# --- –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–ª—è iOS/Android (–∫—Ä–∞–π–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç) ---
def convert_video_for_mobile(input_path: str) -> Optional[str]:
    """
    –ü–µ—Ä–µ–∫–æ–¥ –≤ mp4 (H.264 + AAC) –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ iOS/Android.
    –î–æ–±–∞–≤–ª–µ–Ω—ã -nostdin, -loglevel error –∏ —Ç–∞–π–º–∞—É—Ç, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≤–∏—Å–∞–ª–æ.
    –ï—Å–ª–∏ –∞—É–¥–∏–æ —É–∂–µ AAC ‚Äî –∫–æ–ø–∏—Ä—É–µ–º –µ–≥–æ, —á—Ç–æ–±—ã —Å–Ω–∏–∑–∏—Ç—å –Ω–∞–≥—Ä—É–∑–∫—É.
    """
    try:
        base, _ext = os.path.splitext(input_path)
        output_path = f"{base}_ios.mp4"

        vcodec, acodec = check_codecs(input_path)
        audio_args = ["-c:a", "copy"] if acodec == "aac" else ["-c:a", "aac", "-b:a", "128k"]

        cmd = [
            ffmpeg_bin(), "-nostdin", "-loglevel", "error",
            "-y", "-i", input_path,
            "-c:v", "libx264", "-preset", "veryfast", "-crf", "23",
            "-profile:v", "high", "-level:v", "4.0",
            "-pix_fmt", "yuv420p",
            *audio_args,
            "-movflags", "+faststart",
            "-vf", "scale=trunc(iw/2)*2:trunc(ih/2)*2",
            output_path,
        ]
        logging.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {output_path}")
        subprocess.run(cmd, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, timeout=600)
        return output_path if os.path.exists(output_path) else None
    except subprocess.TimeoutExpired:
        logging.error("–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ç–∞–π–º–∞—É—Ç –∏ –±—ã–ª–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
        return None
    except subprocess.CalledProcessError as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: {e}")
        return None
    except Exception as e:
        logging.exception(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        return None

# --- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ ---
def download_video_from_url(
    url: str,
    platform: str,
    progress_hook: Optional[Callable[[dict], None]] = None,
) -> Optional[str]:
    """
    –°–∫–∞—á–∏–≤–∞–µ—Ç –≤–∏–¥–µ–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É (–∫–∞–∫ —Å–∫–∞—á–∞–Ω–æ —É –∏—Å—Ç–æ—á–Ω–∏–∫–∞).
    –†–µ–ø–∞–∫/–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ.
    """
    try:
        unique_id = uuid.uuid4()
        output_template = f"downloads/{platform}/{unique_id}.%(ext)s"
        os.makedirs(f"downloads/{platform}", exist_ok=True)

        # –ë–∞–∑–æ–≤—ã–µ –æ–ø—Ü–∏–∏
        ydl_opts = {
            "quiet": True,
            "no_warnings": True,
            "outtmpl": output_template,
            "noplaylist": True,
            "ffmpeg_location": FFMPEG_PATH if os.path.exists(FFMPEG_PATH) else None,
            "retries": 5,
            "fragment_retries": 5,
            "concurrent_fragment_downloads": 1,
            "http_headers": {
                "User-Agent": (
                    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                    "AppleWebKit/537.36 (KHTML, like Gecko) "
                    "Chrome/124.0.0.0 Safari/537.36"
                )
            },
        }

        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ cookiefile —Ç–æ–ª—å–∫–æ –¥–ª—è Instagram (–µ—Å–ª–∏ —Ñ–∞–π–ª –µ—Å—Ç—å)
        if platform == "instagram" and os.path.exists(COOKIES_FILE):
            ydl_opts["cookiefile"] = COOKIES_FILE
            logging.info(f"–ò—Å–ø–æ–ª—å–∑—É—é cookiefile: {COOKIES_FILE}")

        # –§–æ—Ä–º–∞—Ç–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –∏ merge-–ø–æ–≤–µ–¥–µ–Ω–∏–µ ‚Äî –∑–∞–≤–∏—Å—è—Ç –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        if platform == "youtube":
            # –î–ª—è YouTube –¥–µ–ª–∞–µ–º –±–æ–ª–µ–µ –≥–∏–±–∫–∏–π –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–æ–≤, –∏ –ù–ï —Ñ–æ—Ä—Å–∏–º merge –≤ mp4.
            ydl_opts["format"] = (
                "bv*[vcodec^=avc1][ext=mp4]+ba[ext=m4a]/"
                "b[ext=mp4]/"
                "bv*+ba/b"
            )
            # –ü–æ–∑–≤–æ–ª—è–µ–º yt-dlp —Å–∞–º–æ–º—É –≤—ã–±—Ä–∞—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä (mkv, webm), –ø–æ—Ç–æ–º –º—ã —Å–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–µ–ø–∞–∫–Ω–µ–º/—Å–∫–æ–Ω–≤–µ—Ä—Ç–∏–º
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ä–∞–µ–º—Å—è —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∏—Ç—å mp4+h264+aac
            ydl_opts["format"] = (
                "bestvideo[vcodec^=avc1][ext=mp4]+bestaudio[ext=m4a]/"
                "best[ext=mp4]/best"
            )
            ydl_opts["merge_output_format"] = "mp4"

        if progress_hook:
            ydl_opts["progress_hooks"] = [progress_hook]

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            logging.info(f"–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å {platform}: {url}")
            ydl.extract_info(url, download=True)
            base_path = f"downloads/{platform}/{unique_id}"
            for ext in ("mp4", "mkv", "webm"):
                video_file = f"{base_path}.{ext}"
                if os.path.exists(video_file):
                    logging.info(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {video_file}")
                    return video_file

            logging.error(f"–û—à–∏–±–∫–∞: —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {url}")
            return None

    except Exception as e:
        logging.exception(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Å {platform} ({url}): {e}")
        return None

# --- –•—ç–Ω–¥–ª–µ—Ä—ã ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    await state.clear()
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –Ω–∏–∂–µ.\n\n"
        "üí° –°–æ–≤–µ—Ç: —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—è –ø—Ä—è–º–æ –≤ –ª—é–±–æ–º —á–∞—Ç–µ!\n"
        "–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–∏—à–∏: @tktdown_bot <—Å—Å—ã–ª–∫–∞>",
        reply_markup=create_main_keyboard(),
    )

@dp.message(lambda m: m.text in ["üì• TikTok", "üì∏ Instagram", "üé• YouTube", "üê¶ X (Twitter)"])
async def handle_platform_choice(message: types.Message, state: FSMContext):
    await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.", reply_markup=ReplyKeyboardRemove())
    await state.set_state(DownloadState.url)

@dp.message(DownloadState.url)
@dp.message(lambda m: m.text and m.text.startswith("http"))
async def process_video_link(message: types.Message, state: FSMContext):
    url = message.text.strip()
    await state.clear()

    platform = get_platform_from_url(url)
    if not platform:
        await message.reply("–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ.", reply_markup=create_main_keyboard())
        return

    loading_message = await message.reply("üì• –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∑–∞–≥—Ä—É–∑–∫–µ...")

    loop = asyncio.get_running_loop()
    last_update_time = 0.0

    def progress_hook(d: dict) -> None:
        nonlocal last_update_time
        try:
            if d.get("status") == "downloading":
                current_time = time.time()
                if current_time - last_update_time < 1.5:
                    return
                total = d.get("total_bytes") or d.get("total_bytes_estimate") or 0
                if total > 0:
                    percent = (d.get("downloaded_bytes") or 0) / total * 100.0
                    speed = d.get("speed") or 0.0
                    progress_bar = "".join("‚ñà" if i < percent / 10 else "‚ñë" for i in range(10))
                    status_text = (
                        "üì• **–°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ...**\n"
                        f"`{progress_bar}` {percent:.1f}%\n"
                        f"–°–∫–æ—Ä–æ—Å—Ç—å: {speed / 1024 / 1024:.2f} –ú–ë/—Å"
                    )
                    fut = asyncio.run_coroutine_threadsafe(
                        loading_message.edit_text(status_text, parse_mode="Markdown"),
                        loop,
                    )
                    try:
                        fut.result(timeout=0)
                    except Exception:
                        pass
                    last_update_time = current_time
        except Exception as e:
            logging.debug(f"–û—à–∏–±–∫–∞ –≤ progress_hook: {e}")

    # –°–∫–∞—á–∏–≤–∞–µ–º
    video_file = await asyncio.to_thread(download_video_from_url, url, platform, progress_hook)

    if not video_file:
        await loading_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ.")
        hint = "–≠—Ç–æ –º–æ–≥ –±—ã—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π/–≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π —Ä–æ–ª–∏–∫ –∏–ª–∏ Instagram –ø–æ–ø—Ä–æ—Å–∏–ª –≤—Ö–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É."
        if platform == "instagram":
            hint = "Instagram –¥–ª—è —ç—Ç–æ–π —Å—Å—ã–ª–∫–∏ —Ç—Ä–µ–±—É–µ—Ç –≤—Ö–æ–¥ –∏–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª –ª–∏–º–∏—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É."
        await message.answer(hint, reply_markup=create_main_keyboard())
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥–µ–∫–∏ –∏ —Ä–µ—à–∞–µ–º, —á—Ç–æ –¥–µ–ª–∞—Ç—å
    vcodec, acodec = await asyncio.to_thread(check_codecs, video_file)
    path_to_send = video_file
    repacked_path = None
    converted_path = None

    if not (vcodec == "h264" and acodec == "aac"):
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –±—ã—Å—Ç—Ä—ã–π —Ä–µ–ø–∞–∫ –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        repacked_path = await asyncio.to_thread(repack_to_mp4, video_file)
        if repacked_path:
            rv, ra = await asyncio.to_thread(check_codecs, repacked_path)
            if rv == "h264" and ra == "aac":
                path_to_send = repacked_path
            else:
                # –¢–æ–ª—å–∫–æ —Ç–µ–ø–µ—Ä—å ‚Äî –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è (—Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ -nostdin)
                await loading_message.edit_text("üîß –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤–∏–¥–µ–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ iOS/Android...")
                converted_path = await asyncio.to_thread(convert_video_for_mobile, video_file)
                path_to_send = converted_path or repacked_path or video_file
        else:
            # –†–µ–ø–∞–∫ –Ω–µ —É–¥–∞–ª—Å—è ‚Äî —Å—Ä–∞–∑—É –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º
            await loading_message.edit_text("üîß –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤–∏–¥–µ–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ iOS/Android...")
            converted_path = await asyncio.to_thread(convert_video_for_mobile, video_file)
            path_to_send = converted_path or video_file

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    await loading_message.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ...")
    try:
        video_input = FSInputFile(path_to_send)
        await message.reply_video(video_input)
        await loading_message.delete()
        logging.info(f"–í–∏–¥–µ–æ —Å {platform} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ–Ω—è ü•∞", reply_markup=create_main_keyboard())
        await message.answer(
            "üí° –¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è inline-—Ä–µ–∂–∏–º–æ–º:\n"
            "–ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ @tktdown_bot <—Å—Å—ã–ª–∫–∞> –ø—Ä—è–º–æ –≤ –ª—é–±–æ–º —á–∞—Ç–µ.",
            reply_markup=create_main_keyboard(),
        )
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
        await loading_message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ.")
        await message.answer("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:", reply_markup=create_main_keyboard())
    finally:
        # –ß–∏—Å—Ç–∏–º —Ñ–∞–π–ª—ã
        for p in {video_file, repacked_path, converted_path}:
            if p and os.path.exists(p):
                try:
                    os.remove(p)
                    logging.info(f"–§–∞–π–ª {p} —É–¥–∞–ª–µ–Ω.")
                except OSError as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {p}: {e}")

# --- –ò–Ω–ª–∞–π–Ω —Ä–µ–∂–∏–º ---
@dp.inline_query()
async def inline_handler(query: InlineQuery):
    url = (query.query or "").strip()
    results = []
    if not url.startswith("http"):
        await query.answer(results, cache_time=1)
        return

    platform = get_platform_from_url(url)
    if not platform:
        await query.answer(results, cache_time=1)
        return

    logging.info(f"–ò–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å {platform}: {url}")
    video_file_path: Optional[str] = None
    repacked_path: Optional[str] = None
    converted_path: Optional[str] = None
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º
        video_file_path = await asyncio.to_thread(download_video_from_url, url, platform)
        if video_file_path:
            send_path = video_file_path
            vcodec, acodec = await asyncio.to_thread(check_codecs, video_file_path)
            if not (vcodec == "h264" and acodec == "aac"):
                repacked_path = await asyncio.to_thread(repack_to_mp4, video_file_path)
                if repacked_path:
                    rv, ra = await asyncio.to_thread(check_codecs, repacked_path)
                    if rv == "h264" and ra == "aac":
                        send_path = repacked_path
                    else:
                        converted_path = await asyncio.to_thread(convert_video_for_mobile, video_file_path)
                        send_path = converted_path or repacked_path or video_file_path
                else:
                    converted_path = await asyncio.to_thread(convert_video_for_mobile, video_file_path)
                    send_path = converted_path or video_file_path

            sent = await bot.send_video(chat_id=query.from_user.id, video=FSInputFile(send_path))
            file_id = sent.video.file_id
            await sent.delete()

            results.append(
                InlineQueryResultCachedVideo(
                    id=str(uuid.uuid4()),
                    video_file_id=file_id,
                    title="–í–∏–¥–µ–æ",
                    description="–í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ –≤–∞—à–∏–º –±–æ—Ç–æ–º",
                )
            )
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –≤ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
    finally:
        for p in {video_file_path, repacked_path, converted_path}:
            if p and os.path.exists(p):
                try:
                    os.remove(p)
                    logging.info(f"–ò–Ω–ª–∞–π–Ω-—Ñ–∞–π–ª {p} —É–¥–∞–ª–µ–Ω.")
                except OSError as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {p}: {e}")

    await query.answer(results, cache_time=1)

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    install_ffmpeg()  # —É–±–µ—Ä–∏—Ç–µ, –µ—Å–ª–∏ FFmpeg —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å–∏—Å—Ç–µ–º–Ω–æ
    os.makedirs("downloads", exist_ok=True)
    asyncio.run(main())
