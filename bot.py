import os
import logging
import re
import asyncio
import uuid
import subprocess
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import (
    FSInputFile,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineQuery,
    InlineQueryResultVideo,
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import yt_dlp
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
API_TOKEN = os.getenv("BOT_TOKEN")
FFMPEG_PATH = "bin/ffmpeg"  # –ü—É—Ç—å –∫ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–º—É —Ñ–∞–π–ª—É ffmpeg

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ FFmpeg ---
def install_ffmpeg():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ FFmpeg –∏ —Å–∫–∞—á–∏–≤–∞–µ—Ç –µ–≥–æ, –µ—Å–ª–∏ –æ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –¥–ª—è Linux-–ø–æ–¥–æ–±–Ω—ã—Ö —Å–∏—Å—Ç–µ–º.
    """
    if not os.path.exists(FFMPEG_PATH):
        logging.info("FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ...")
        try:
            os.makedirs("bin", exist_ok=True)
            # URL –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–±–æ—Ä–∫–∏ FFmpeg –¥–ª—è amd64
            ffmpeg_url = "https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz"
            archive_path = "ffmpeg.tar.xz"

            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
            subprocess.run(
                ["curl", "-L", "-o", archive_path, ffmpeg_url], check=True
            )
            logging.info("–ê—Ä—Ö–∏–≤ FFmpeg —Å–∫–∞—á–∞–Ω.")

            # –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ
            temp_dir = "ffmpeg_temp"
            os.makedirs(temp_dir, exist_ok=True)
            subprocess.run(
                ["tar", "-xJf", archive_path, "-C", temp_dir, "--strip-components=1"],
                check=True,
            )
            os.rename(os.path.join(temp_dir, "ffmpeg"), FFMPEG_PATH)

            # –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            os.chmod(FFMPEG_PATH, 0o755)

            # –û—á–∏—Å—Ç–∫–∞
            os.remove(archive_path)
            os.rmdir(temp_dir)

            logging.info("FFmpeg —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        except (subprocess.CalledProcessError, FileNotFoundError) as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å FFmpeg: {e}")
            logging.error(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ FFmpeg –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ 'curl' –∏ 'tar' –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –≤–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ."
            )
            # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏, –º–æ–∂–Ω–æ –ª–∏–±–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É
            # exit(1) # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, –µ—Å–ª–∏ FFmpeg —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –¥–ª—è —Ä–∞–±–æ—Ç—ã
        except Exception as e:
            logging.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ FFmpeg: {e}")


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s"
)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class DownloadState(StatesGroup):
    url = State()

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def create_main_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì• TikTok")],
            [KeyboardButton(text="üì∏ Instagram")],
            [KeyboardButton(text="üé• YouTube")],
            [KeyboardButton(text="üê¶ X (Twitter)")],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    return keyboard

# --- –§—É–Ω–∫—Ü–∏–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è ---
def download_video_from_url(url: str, platform: str) -> str | None:
    """
    –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º yt-dlp.
    """
    try:
        unique_id = uuid.uuid4()
        output_template = f"downloads/{platform}/{unique_id}.%(ext)s"
        os.makedirs(f"downloads/{platform}", exist_ok=True)

        ydl_opts = {
            "quiet": True,
            "format": "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best",
            "outtmpl": output_template,
            "noplaylist": True,
            "merge_output_format": "mp4",
            "ffmpeg_location": FFMPEG_PATH,
        }

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            logging.info(f"–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å {platform}: {url}")
            info_dict = ydl.extract_info(url, download=True)
            
            base_path = f"downloads/{platform}/{unique_id}"
            for ext in ['mp4', 'mkv', 'webm']:
                video_file = f"{base_path}.{ext}"
                if os.path.exists(video_file):
                    logging.info(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {video_file}")
                    return video_file
            
            logging.error(f"–û—à–∏–±–∫–∞: —Å–∫–∞—á–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è {url}")
            return None

    except yt_dlp.utils.DownloadError as e:
        logging.error(f"–û—à–∏–±–∫–∞ yt-dlp –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Å {platform} ({url}): {e}")
        return None
    except Exception as e:
        logging.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Å {platform} ({url}): {e}")
        return None

def get_platform_from_url(url: str) -> str | None:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –ø–æ URL."""
    if "tiktok.com" in url:
        return "tiktok"
    if "instagram.com" in url:
        return "instagram"
    if "youtube.com" in url or "youtu.be" in url:
        return "youtube"
    if "twitter.com" in url or "x.com" in url:
        return "twitter"
    return None

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞.")
    await state.clear()
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ.\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –Ω–∏–∂–µ.",
        reply_markup=create_main_keyboard(),
    )

@dp.message(lambda message: message.text in ["üì• TikTok", "üì∏ Instagram", "üé• YouTube", "üê¶ X (Twitter)"])
async def handle_platform_choice(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã."""
    await message.reply(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.", reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(DownloadState.url)

@dp.message(DownloadState.url)
@dp.message(lambda message: message.text and message.text.startswith("http"))
async def process_video_link(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ."""
    url = message.text.strip()
    await state.clear()

    platform = get_platform_from_url(url)
    if not platform:
        await message.reply("–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –≤–µ—Ä–Ω–∞.")
        return

    loading_message = await message.reply("üì• –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    video_file = await asyncio.to_thread(download_video_from_url, url, platform)
    
    await loading_message.delete()

    if video_file:
        try:
            video_input = FSInputFile(video_file)
            await message.reply_video(video_input)
            logging.info(f"–í–∏–¥–µ–æ —Å {platform} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}.")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
            await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π.")
        finally:
            try:
                os.remove(video_file)
                logging.info(f"–§–∞–π–ª {video_file} —É–¥–∞–ª–µ–Ω.")
            except OSError as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {video_file}: {e}")
    else:
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é.")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞ ---

@dp.inline_query()
async def inline_handler(query: InlineQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å—ã."""
    url = query.query.strip()
    results = []

    if url.startswith("http"):
        platform = get_platform_from_url(url)
        if platform:
            logging.info(f"–ò–Ω–ª–∞–π–Ω-–∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å {platform}: {url}")
            
            video_file_path = download_video_from_url(url, platform)

            if video_file_path:
                try:
                    video_file = FSInputFile(video_file_path)
                    
                    msg = await bot.send_video(chat_id=query.from_user.id, video=video_file, caption="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–∞...")
                    video_file_id = msg.video.file_id
                    await msg.delete()

                    results.append(
                        InlineQueryResultVideo(
                            id=str(uuid.uuid4()),
                            video_file_id=video_file_id,
                            title=f"–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å {platform.capitalize()}",
                            caption=f"–í–∏–¥–µ–æ —Å {platform}",
                            mime_type="video/mp4",
                        )
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –≤ –∏–Ω–ª–∞–π–Ω-—Ä–µ–∂–∏–º–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
                finally:
                    if os.path.exists(video_file_path):
                        os.remove(video_file_path)

    await query.answer(results, cache_time=1)

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    # 1. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FFmpeg, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    install_ffmpeg()
    
    # 2. –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    if not os.path.exists("downloads"):
        os.makedirs("downloads")
        
    # 3. –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(main())