import instaloader
import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import FSInputFile, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import re
import requests
from flask import Flask
import subprocess

FFMPEG_PATH = "bin/ffmpeg"

def install_ffmpeg():
    if not os.path.exists(FFMPEG_PATH):
        print("–°–∫–∞—á–∏–≤–∞–µ–º FFmpeg...")
        os.makedirs("bin", exist_ok=True)
        subprocess.run([
            "curl", "-L", "-o", FFMPEG_PATH,
            "https://johnvansickle.com/ffmpeg/releases/ffmpeg-release-amd64-static.tar.xz"
        ])
        subprocess.run(["tar", "-xJf", FFMPEG_PATH, "-C", "bin", "--strip-components=1"])
        os.chmod(FFMPEG_PATH, 0o755)  # –î–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        print("FFmpeg —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

install_ffmpeg()

API_TOKEN = os.getenv("BOT_TOKEN")  # –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

# –î–ª—è Render
app = Flask(__name__)
@app.route('/')
def index():
    return "Telegram Bot is running!"

ffmpeg_path = os.path.abspath("bin/ffmpeg")

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –§—É–Ω–∫—Ü–∏–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã

def download_video_from_tiktok(url):
    try:
        ydl_opts = {
            'quiet': True,
            'format': 'bestaudio/best',
            'outtmpl': 'downloads/tiktok/%(id)s.%(ext)s',  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–∞–ø–∫–µ –¥–ª—è TikTok
            'noplaylist': True,
            'extractaudio': False,
            'nooverwrites': True,
            'ffmpeg_location': ffmpeg_path,
        }

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            logging.info(f"–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ —Å TikTok: {url}")
            info_dict = ydl.extract_info(url, download=True)
            video_file = f"downloads/tiktok/{info_dict['id']}.mp4"

            if os.path.exists(video_file):
                logging.info(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {video_file}")
                return video_file
            else:
                logging.error(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {video_file}")
                return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {e}")
        return None

def download_video_from_twitter(url):
    try:
        ydl_opts = {
            'quiet': True,
            'format': 'bestvideo+bestaudio/best',  # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ –≤ –ª—É—á—à–µ–º –∫–∞—á–µ—Å—Ç–≤–µ
            'outtmpl': 'downloads/twitter/%(id)s.%(ext)s',
            'noplaylist': True,
            'extractaudio': False,  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤–∏–¥–µ–æ –Ω–µ –±—É–¥–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–æ –∫–∞–∫ –∞—É–¥–∏–æ
            'nooverwrites': True,
            'ffmpeg_location': ffmpeg_path,
        }

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            logging.info(f"–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {url}")
            info_dict = ydl.extract_info(url, download=True)
            video_file = f"downloads/twitter/{info_dict['id']}.mp4"

            if os.path.exists(video_file):
                logging.info(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {video_file}")
                return video_file
            else:
                logging.error(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {video_file}")
                return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ —Å Twitter: {e}")
        return None


def download_video_from_reels(url):
    try:
        L = instaloader.Instaloader()

        logging.info(f"–ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ: {url}")
        shortcode = url.split('/')[-2]  # –ü–æ–ª—É—á–∞–µ–º shortcode –∏–∑ URL
        post = instaloader.Post.from_shortcode(L.context, shortcode)

        # –ü–æ–ª—É—á–∞–µ–º URL –≤–∏–¥–µ–æ
        video_url = post.video_url

        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ requests
        video_file = f"downloads/reels/{shortcode}.mp4"
        video_data = requests.get(video_url)

        with open(video_file, 'wb') as f:
            f.write(video_data.content)

        if os.path.exists(video_file):
            logging.info(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω–æ: {video_file}")
            return video_file
        else:
            logging.error(f"–û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {video_file}")
            return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ —Å Instagram Reels: {e}")
        return None


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
def sanitize_filename(filename):
    return re.sub(r'[^a-zA-Z0-9_\-\.]', '_', filename)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
def create_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°–∫–∞—á–∞—Ç—å —Å TikTok")],
            [KeyboardButton(text="–°–∫–∞—á–∞—Ç—å —Å X(Twitter)")],
            [KeyboardButton(text="–°–∫–∞—á–∞—Ç—å —Å Reels")],
        ],
        resize_keyboard=True
    )
    return keyboard

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class DownloadState(StatesGroup):
    platform = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    url = State()       # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    logging.info("–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start")
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ, —Å –∫–∞–∫–æ–≥–æ —Å–∞–π—Ç–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ.",
        reply_markup=create_main_keyboard()
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(DownloadState.platform)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
@dp.message(lambda message: message.text in ["–°–∫–∞—á–∞—Ç—å —Å TikTok", "–°–∫–∞—á–∞—Ç—å —Å X(Twitter)", "–°–∫–∞—á–∞—Ç—å —Å Reels"])
async def handle_platform_choice(message: types.Message, state: FSMContext):
    # –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
    platform_mapping = {
        "–°–∫–∞—á–∞—Ç—å —Å TikTok": "tiktok",
        "–°–∫–∞—á–∞—Ç—å —Å X(Twitter)": "twitter",
        "–°–∫–∞—á–∞—Ç—å —Å Reels": "reels",
    }

    platform = platform_mapping.get(message.text)

    if platform:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
        await state.update_data(platform=platform)
        await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ.", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(DownloadState.url)  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –≤–≤–æ–¥–∞ URL
    else:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=create_main_keyboard())


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å—Å—ã–ª–∫–∞–º–∏
@dp.message(lambda message: message.text.startswith("http"))
async def download_video(message: types.Message, state: FSMContext):
    url = message.text.strip()

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    platform = user_data.get("platform")  # –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM

    logging.info(f"–°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ –ø–æ —Å—Å—ã–ª–∫–µ: {url}")

    if platform is None:
        await message.reply("–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å—Å—ã–ª–∫–∏
    if not re.match(r'https?://(?:www\.)?.+', url):
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    loading_message = await message.reply("üì• –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")

    # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    download_functions = {
        "tiktok": download_video_from_tiktok,
        "twitter": download_video_from_twitter,
        "reels": download_video_from_reels,
    }

    download_function = download_functions.get(platform)

    if download_function:
        video_file = download_function(url)
        if video_file is None:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å {url}.")
            await loading_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ –ø–æ –¥–∞–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é.")
        else:
            if os.path.exists(video_file):
                try:
                    # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è –¥–ª—è —Ñ–∞–π–ª–∞
                    sanitized_filename = sanitize_filename(f"{os.path.basename(video_file)}")
                    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ: {sanitized_filename}")

                    # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–∞–π–ª —á–µ—Ä–µ–∑ FSInputFile
                    video_input = FSInputFile(video_file, filename=sanitized_filename)
                    await loading_message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è..."
                    await message.reply_video(video_input)
                    logging.info(f"–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
                    await loading_message.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                finally:
                    try:
                        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                        os.remove(video_file)
                        logging.info(f"–§–∞–π–ª {video_file} —É–¥–∞–ª–µ–Ω –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏.")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {video_file}: {e}")
            else:
                logging.error(f"–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ –ø—É—Ç–∏ {video_file}.")
                await loading_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.")
    else:
        logging.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞.")
        await loading_message.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø–ª–∞—Ç—Ñ–æ—Ä–º—É —Å–Ω–æ–≤–∞.")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    await message.reply(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ–Ω—è üòä",
        reply_markup=create_main_keyboard()
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫ –≤—ã–±–æ—Ä—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
    await state.set_state(DownloadState.platform)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –±–µ–∑ asyncio.run()
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    import sys
    if sys.version_info >= (3, 7):
        import nest_asyncio
        nest_asyncio.apply()  # –†–∞–∑—Ä–µ—à–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ asyncio.run() –≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Ü–∏–∫–ª–µ —Å–æ–±—ã—Ç–∏–π
    import asyncio
    asyncio.run(main())  # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
